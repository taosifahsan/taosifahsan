Assessment Summary

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  41/41 tests passed
Memory:       11/11 tests passed
Timing:       35/35 tests passed

Assessment Details

The following files were submitted:
----------------------------------
 2.8K Nov 12 19:58 AutoGuitar.java
 2.4K Nov 12 20:55 EnrichedGuitarHero.java
 1.9K Nov 11 21:31 GuitarHero.java
 3.1K Nov 11 21:31 GuitarString.java
 1.3K Nov 11 21:32 readme.txt
 4.0K Nov 11 21:31 RingBuffer.java

|---------------------Free Late Day Ledger---------------------|
|netid      |used on another |used on this    |remaining       |
|dfarmer    |4               |0               |0               |
|tahsan     |0               |0               |4               |
|--------------------------------------------------------------|


********************************************************************************
*  COMPILING
********************************************************************************


% javac RingBuffer.java
*-----------------------------------------------------------

% javac GuitarString.java
*-----------------------------------------------------------

% javac GuitarHero.java
*-----------------------------------------------------------

% javac AutoGuitar.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
RingBuffer:

GuitarString:

GuitarHero:

AutoGuitar:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for RingBuffer.java
*-----------------------------------------------------------

% custom checkstyle checks for GuitarString.java
*-----------------------------------------------------------

% custom checkstyle checks for GuitarHero.java
*-----------------------------------------------------------

% custom checkstyle checks for AutoGuitar.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of RingBuffer
*-----------------------------------------------------------
Running 13 total tests.

Tests 1-5 make random calls to enqueue(), dequeue(), peek(),
isEmpty(), isFull(), size(), and capacity(). The probabilities of
each operation are (p1, p2, p3, p4, p5, p6, p7), respectively.

Test 1a: random calls to enqueue() and peek()
         (without letting the ring buffer get full)
  *    5 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *   50 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *  500 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  * 1000 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
==> passed

Test 1b: random calls to enqueue() and peek()
         (until the ring buffer gets full)
  *    5 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *   50 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *  500 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
  * 1000 random calls (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0), capacity = 100
==> passed

Test 2a: random calls to enqueue(), isFull(), size(), and capacity()
         (without letting the ring buffer get full)
  *    5 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  *  500 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  * 1000 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
==> passed

Test 2b: random calls to enqueue(), isFull(), size(), and capacity()
         (until the ring buffer gets full)
  *    5 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  *  500 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
  * 1000 random calls (0.7, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1), capacity = 100
==> passed

Test 3a: random calls to enqueue(), dequeue(), and peek()
         (without letting the ring buffer get full or empty)
  *    5 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *   50 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *  500 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  * 1000 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
==> passed

Test 3b: random calls to enqueue(), dequeue(), and peek()
         (allowing the ring buffer get full or empty)
  *    5 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *   50 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  *  500 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
  * 1000 random calls (0.4, 0.4, 0.2, 0.0, 0.0, 0.0, 0.0), capacity = 100
==> passed

Test 4a: random calls to all methods
         (without letting the ring buffer get full or empty)
  *    5 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *  500 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  * 1000 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
==> passed

Test 4b: random calls to all methods
        (allowing the ring buffer get full or empty)
  *    5 random calls (0.4, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.4, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *  500 random calls (0.4, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  * 1000 random calls (0.4, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *    5 random calls (0.1, 0.4, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.1, 0.4, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  *  500 random calls (0.1, 0.4, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
  * 1000 random calls (0.1, 0.4, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 100
==> passed

Test 5: random calls to all methods, with small ring buffer capacities
        (ensuring that the ring buffer repeatedly fills and empties)
  * 10000 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 5
  * 10000 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 10
  * 10000 random calls (0.25, 0.25, 0.1, 0.1, 0.1, 0.1, 0.1), capacity = 20
==> passed

Test 6: Calls to isFull(), isEmpty(), size(), and capacity() before enqueueing any items
  *    5 random calls (0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), capacity = 100
  *    5 random calls (0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), capacity = 100
  *    5 random calls (0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0), capacity = 100
  *    5 random calls (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), capacity = 100
  *   50 random calls (0.0, 0.0, 0.0, 0.7, 0.1, 0.1, 0.1), capacity = 100
  *   50 random calls (0.0, 0.0, 0.0, 0.1, 0.7, 0.1, 0.1), capacity = 100
  *   50 random calls (0.0, 0.0, 0.0, 0.1, 0.1, 0.7, 0.1), capacity = 100
  *   50 random calls (0.0, 0.0, 0.0, 0.1, 0.1, 0.1, 0.7), capacity = 100
==> passed

Test 7: Exceptional calls to enqueue(), dequeue(), and peek()
  * calls enqueue() when ring buffer is full
  * calls dequeue() when ring buffer is empty
  * calls peek() when ring buffer is empty
==> passed

Test 8: create a ring buffer of capacity n; enqueue() n items, with each
        each item having value 0 with probability p; dequeue() n items
  * n = 10, p = 0.0
  * n = 50, p = 0.0
  * n = 1000, p = 0.0
  * n = 10, p = 0.5
  * n = 50, p = 0.5
  * n = 1000, p = 0.5
==> passed

Test 9: create multiple ring buffer objects at the same time
  * ring buffers of capacity 20 and 10
  * ring buffers of capacity 10 and 20
  * ring buffers of capacity 100 and 200
  * ring buffers of capacity 200 and 100
==> passed


Total: 13/13 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of RingBuffer
*-----------------------------------------------------------
Running 11 total tests.

Test 1a-1k: total memory usage for RingBuffer of capacity n

                 n        bytes
----------------------------------------------------------
=> passed       16          192
=> passed       32          320
=> passed       64          576
=> passed      128         1088
=> passed      256         2112
=> passed      512         4160
=> passed     1024         8256
=> passed     2048        16448
=> passed     4096        32832
=> passed     8192        65600
=> passed    16384       131136
==> 11/11 tests passed


Estimated memory: 8.00 n + 64.00   (R^2 = 1.000)

Maximum allowed memory: 8n + 128 bytes

Total: 11/11 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing RingBuffer
*-----------------------------------------------------------
Running 22 total tests.

Test 1a-1k:  Create RingBuffer of capacity n; enqueue() n items;
             interleave n calls each to dequeue(), peek(), and enqueue().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.05
==> 11/11 tests passed


Test 2a-2k:  Create RingBuffer of capacity n; enqueue n/2 items;
             then make n random calls to size(), isEmpty(), isFull(),
             enqueue(), dequeue(), and peek()

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.03
=> passed     1024000     0.07
==> 11/11 tests passed

Total: 22/22 tests passed!


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference RingBuffer)
********************************************************************************

Testing correctness of GuitarString
*-----------------------------------------------------------
Running 12 total tests.

Test 1a: construct GuitarString of specified frequency and check length()
         (for frequencies on chromatic scale)
  * frequency = 110.0
  * frequency = 220.0
  * frequency = 440.0
  * frequency = 880.0
  * frequency = 415.3046975799451
  * frequency = 466.1637615180899
==> passed

Test 1b: construct GuitarString of specified frequency and check length()
         (for frequencies that are divisors of 44,100)
  * frequency = 63.0
  * frequency = 441.0
  * frequency = 225.0
  * frequency = 1575.0
  * frequency = 100.0
  * frequency = 490.0
  * frequency = 1764.0
  * frequency = 4410.0
  * frequency = 1.0
  * frequency = 0.25
==> passed

Test 2: construct GuitarString using init[] array and check length()
  * init[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
  * init[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
  * init[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
==> passed

Test 3a: construct GuitarString of specified frequency and check that associated
         RingBuffer object has desired capacity, size, and initial values
         (for frequencies on chromatic scale)
  * frequency = 110.0
  * frequency = 220.0
  * frequency = 440.0
  * frequency = 880.0
  * frequency = 415.3046975799451
  * frequency = 466.1637615180899
==> passed

Test 3b: construct GuitarString of specified frequency and check that associated
         RingBuffer object has desired capacity, size, and initial values
         (for frequencies that are divisors of 44,100)
  * frequency = 63.0
  * frequency = 441.0
  * frequency = 225.0
  * frequency = 1575.0
  * frequency = 100.0
  * frequency = 490.0
  * frequency = 1764.0
  * frequency = 4410.0
  * frequency = 1.0
  * frequency = 0.25
==> passed

Test 4: construct GuitarString using init[] array; check that associated
        RingBuffer object has desired capacity, size, and initial values
  * init[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
  * init[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
  * init[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
==> passed

Test 5: construct GuitarString of specified frequency; call pluck(); and check that
        associated RingBuffer object has uniformly random values between -0.5 and 0.5
  * frequency = 440.0
  * frequency = 220.0
  * frequency = 130.8127826502993
  * frequency = 146.8323839587038
  * frequency = 441.0
  * frequency = 63.0
  * frequency = 10.0
  * frequency = 1.0
==> passed

Test 6: construct GuitarString using init[] array; call pluck(); and check that
        associated RingBuffer object has uniformly random values between -0.5 and 0.5
  * init[] = { 0.0, 0.0, 0.0, ..., 0.0, 0.0, 0.0 }  [1000 values]
  * init[] = { 0.0, 0.0, 0.0, ..., 0.0, 0.0, 0.0 }  [10000 values]
  * init[] = { 0.0, 0.0, 0.0, ..., 0.0, 0.0, 0.0 }  [100000 values]
  * init[] = { 0.0, 1.0, 2.0, ..., 997.0, 998.0, 999.0 }  [1000 values]
==> passed

Test 7: construct GuitarString using init[] array; perform alternating
        sequence of calls to sample() and tic()
  * init[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
  * init[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
  * init[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
==> passed


Tests 8-9 make random calls to sample(), tic(), and pluck().
The probabilities of each operation are (p1, p2, p3), respectively.

Test 8: random intermixed calls to sample() and tic()
  * 1000 random calls with (p1, p2, p3) = (0.5, 0.5, 0.0)
  * 1000 random calls with (p1, p2, p3) = (0.5, 0.5, 0.0)
  * 1000 random calls with (p1, p2, p3) = (0.5, 0.5, 0.0)
  * 1000 random calls with (p1, p2, p3) = (0.5, 0.5, 0.0)
  * 1000 random calls with (p1, p2, p3) = (0.5, 0.5, 0.0)
==> passed

Test 9: random intermixed calls to sample(), tic(), and pluck()
  * 1000 random calls with (p1, p2, p3) = (0.45, 0.5, 0.05)
  * 1000 random calls with (p1, p2, p3) = (0.45, 0.5, 0.05)
  * 1000 random calls with (p1, p2, p3) = (0.45, 0.5, 0.05)
  * 1000 random calls with (p1, p2, p3) = (0.45, 0.5, 0.05)
  * 1000 random calls with (p1, p2, p3) = (0.45, 0.5, 0.05)
==> passed

Test 10: construct two GuitarString objects using init1[] and init2[] arrays;
         perform alternating sequence of calls to sample() and tic()
  * init1[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
    init2[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init1[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
    init2[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init1[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
    init2[] = { 1.0, 2.0, 3.0, 4.0, 5.0 }
==> passed


Total: 12/12 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RingBuffer)
********************************************************************************

Timing GuitarString
*-----------------------------------------------------------
Running 13 total tests.

Test 1: construct GuitarString using init[] array;
        repeatedly call tic() and sample() and check number of calls to methods in RingBuffer
  * init[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
  * init[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
  * init[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
==> passed

Test 2: construct GuitarString using init[] array;
        call pluck() and check number of calls to methods in RingBuffer
  * init[] = { 0.2, 0.4, 0.5, 0.3, -0.2, 0.4, 0.3, 0.0, -0.1, -0.3 }
  * init[] = { 0.125, 0.25, 0.5, 0.375, -0.25, 0.5 }
  * init[] = { 0.125, 0.25, 0.0, 0.375, -0.25, 0.5 }
  * init[] = { 0.0, 0.0, 0.0, 0.75, -0.5, 0.0, 0.0, 0.25 }
  * init[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
==> passed

Test 2a-2k:  Create a GuitarString of length n; call pluck();
             then, interleave n calls each to sample() and tic().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.03
=> passed     1024000     0.05
==> 11/11 tests passed



Total: 13/13 tests passed!

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference RingBuffer and GuitarString)
********************************************************************************

Testing correctness of GuitarHero
*-----------------------------------------------------------
Running 12 total tests.

Test 1a: check that pluck() is called exactly once for each keystroke
         (for keystrokes that correspond to guitar strings)
  * sequence of keystrokes: "qwertyuiop"
  * sequence of keystrokes: "qwqqqeqeww"
  * sequence of keystrokes: "q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/' "
==> passed

Test 1b: check that pluck() is called exactly once for each keystroke
         (for some keystrokes that do not correspond to guitar strings)
  * sequence of keystrokes: "9315!@#$"
  * sequence of keystrokes: "qwe13rty"
==> passed

Test 2a: check that GuitarString objects are constructed with correct frequencies
         (for sequeneces of keystrokes that correspond to guitar strings with integral frequencies)
  * single keystroke: "q"
  * single keystroke: "i"
  * single keystroke: "v"
  * single keystroke: " "
  * sequence of keystrokes: "qiv "
  * sequence of keystrokes: "ivivqqi iv"
==> passed

Test 2b: check that GuitarString objects are constructed with correct frequencies
         (for sequences of keystrokes that correspond to guitar strings with arbitrary frequencies)
  * sequence of keystrokes: "qwertyuiop"
  * sequence of keystrokes: "qwqqqeqeww"
  * sequence of keystrokes: "q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/' "
==> passed

Test 3: check that tic() is called once per call to StdAudio.play()
  * sequence of keystrokes: "qwertyuiop"
  * sequence of keystrokes: "qwqqqeqeww"
  * sequence of keystrokes: "q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/' "
==> passed

Test 4a: check correctness of output on StdAudio
         (for time intervals so short that there is no Karplus-Strong feedback)
  * single keystroke: "q"
  * single keystroke: "w"
  * single keystroke: "e"
  * single keystroke: "i"
  * sequence of keystrokes: "qiv "
  * sequence of keystrokes: "iiqivqqivq"
==> passed

Test 4b: check correctness of output on StdAudio
         (for single keystrokes corresponding to guitar strings)
  * single keystroke: "q"
  * single keystroke: "i"
  * single keystroke: "r"
  * single keystroke: "t"
  * single keystroke: "u"
==> passed

Test 4c: check correctness of output on StdAudio
         (for sequences of keystrokes corresponding to guitar strings with integral frequencies)
  * sequence of keystrokes: "qiv "
  * sequence of keystrokes: "ivivqqi iv"
==> passed

Test 4d: check correctness of output on StdAudio
         (for sequences of keystrokes corresponding to guitar strings with arbitrary frequencies)
  * sequence of keystrokes: "qweuioxc"
  * sequence of keystrokes: "q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/' "
==> passed

Test 4e: check correctness of output on StdAudio
         (for sequence of keystrokes, some of which do not correspond to guitar strings)
  * sequence of keystrokes: "qashi136"
  * sequence of keystrokes: "9876543210"
==> passed

Test 4f: check correctness of output on StdAudio
         (for random sequences of keystrokes corresponding to guitar strings with integral frequencies)
  * typing 1 random keystroke
  * typing 10 random keystrokes
  * typing 100 random keystrokes
==> passed

Test 4g: check correctness of output on StdAudio
         (for random sequences of keystrokes corresponding to guitar strings with arbitrary frequencies)
  * typing 1 random keystroke
  * typing 10 random keystrokes
  * typing 100 random keystrokes
==> passed


Total: 12/12 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RingBuffer and GuitarString)
********************************************************************************

Testing correctness of AutoGuitar
*-----------------------------------------------------------
Running 4 total tests.

Test 0: check that it doesn't throw an exception
==> passed

Test 1: check that duration is betwen 10 and 120 seconds
        (between 441000 and 5292000 samples)
==> passed

Test 2: check that the samples are valid real numbers
==> passed

Test 3: save results to a WAV file
==> passed


Total: 4/4 tests passed!


================================================================
