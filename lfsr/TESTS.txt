 Assessment Summary

 Compilation:  PASSED
 API:          PASSED

 Spotbugs:     PASSED
 PMD:          PASSED
 Checkstyle:   PASSED

 Correctness:  38/38 tests passed
 Memory:       10/10 tests passed
 Timing:       25/25 tests passed

 Assessment Details

 The following files were submitted:
 ----------------------------------
  3.4K Nov  2 13:44 LFSR.java
  2.6K Nov  2 16:09 PhotoMagic.java
  1.7K Nov  2 16:44 readme.txt

 |---------------------Free Late Day Ledger---------------------|
 |netid      |used on another |used on this    |remaining       |
 |tahsan     |0               |0               |4               |
 |--------------------------------------------------------------|


 ********************************************************************************
 *  COMPILING
 ********************************************************************************


 % javac LFSR.java
 *-----------------------------------------------------------

 % javac PhotoMagic.java
 *-----------------------------------------------------------


 ================================================================


 Checking the APIs of your programs.
 *-----------------------------------------------------------
 LFSR:

 PhotoMagic:

 ================================================================


 ********************************************************************************
 *  CHECKING STYLE AND COMMON BUG PATTERNS
 ********************************************************************************


 % spotbugs *.class
 *-----------------------------------------------------------


 ================================================================


 % pmd .
 *-----------------------------------------------------------


 ================================================================


 % checkstyle *.java
 *-----------------------------------------------------------

 % custom checkstyle checks for LFSR.java
 *-----------------------------------------------------------

 % custom checkstyle checks for PhotoMagic.java
 *-----------------------------------------------------------


 ================================================================


 ********************************************************************************
 *  TESTING CORRECTNESS
 ********************************************************************************

 Testing correctness of LFSR
 *-----------------------------------------------------------
 Running 23 total tests.

 Test 1: check length() with no intervening calls to step() or generate()
   * seed = "01101000010", tap = 9
   * seed = "01101000010", tap = 4
   * seed = "01101000010100010000", tap = 17
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59
 ==> passed

 Test 2: check bitAt() with no intervening calls to step() or generate()
   * seed = "01101000010", tap = 9
   * seed = "01101000010", tap = 4
   * seed = "01101000010100010000", tap = 17
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59
 ==> passed

 Test 3: check toString() with no intervening calls to step() or generate()
   * seed = "01101000010", tap = 9
   * seed = "01101000010", tap = 4
   * seed = "01101000010100010000", tap = 17
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59
 ==> passed

 Test 4a: check step() and toString() with seed and tap from assignment specification
   * seed = "01101000010", tap = 9
     01101000010
     11010000101 1
     10100001011 1
     01000010110 0
     10000101100 0
     00001011001 1
     00010110010 0
     00101100100 0
     01011001001 1
     10110010010 0
     01100100100 0
 ==> passed

 Test 4b: check generate(k) and toString() with seed and tap from assignment specification
   * seed = "01101000010", tap = 9, k = 5
     01101000010
     00001011001 25
     01100100100 4
     10010011110 30
     01111011011 27
     01101110010 18
     11001011010 26
     01101011100 28
     01110011000 24
     01100010111 23
     01011111101 29
 ==> passed

 Test 5a: check step() with seeds and taps from checklist
   * seed = "01101000010", tap = 9
   * seed = "01101000010", tap = 4
   * seed = "01101000010100010000", tap = 17
   * seed = "010101010101010101010101010101", tap = 23
   * seed = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 5b: check step() with random seeds and taps
   * random seeds of length 3 to 10
   * random seeds of length 10 to 20
   * random seeds of length 20 to 30
 ==> passed

 Test 5c: check step() with random seeds of length >= 30
   * random seeds of length 30 to 60
   * random seeds of length 60 to 200
 ==> passed

 Test 5d: check step() with random palindromic seeds
   * random seeds of length 3 to 10
   * random seeds of length 10 to 20
   * random seeds of length 20 to 50
 ==> passed

 Test 5e: check step() with random seeds and tap exactly in middle
   * random seeds of length 7
   * random seeds of length 11
   * random seeds of length 21
 ==> passed

 Test 5f: check step() with random palindromic seeds and tap exactly in middle
   * random seeds of length 7
   * random seeds of length 11
   * random seeds of length 21
 ==> passed

 Test 5g: check step() with corner case seeds and taps
   * seed = "01101000010", tap = 2
   * seed = "01101000010", tap = 10
   * seed = "01101000010", tap = 11
   * seed = "01101000010", tap = 1
   * seed = "00000000000", tap = 9
   * seed = "11111111111", tap = 4
   * seed = "01", tap = 2
   * seed = "01", tap = 1
   * seed = "1", tap = 1
 ==> passed

 Test 6a: check generate(k) with seeds, taps, and k from checklist
   * seed = "01101000010", tap = 9, k = 1
   * seed = "01101000010", tap = 9, k = 5
   * seed = "01101000010", tap = 9, k = 8
   * seed = "01101000010", tap = 4, k = 5
   * seed = "01101000010100010000", tap = 17, k = 8
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59, k = 8
 ==> passed

 Test 6b: check generate(k) with random seeds, random taps, and k = 1
   * random seeds of length 3 to 10 and k = 1
   * random seeds of length 10 to 20 and k = 1
   * random seeds of length 20 to 30 and k = 1
 ==> passed

 Test 6c: check generate(k) with random seeds, random taps, and k = 1
   * random seeds of length 30 to 60 and k = 1
   * random seeds of length 60 to 200 and k = 1
 ==> passed

 Test 6d: check generate(k) with random seeds, random taps, and fixed k
   * random seeds of length 10 and k = 2
   * random seeds of length 10 and k = 3
   * random seeds of length 10 and k = 5
   * random seeds of length 10 and k = 9
 ==> passed

 Test 6e: check generate(k) with random seeds, taps, and k
   * random seeds of length 6 to 20 and random k between 1 and 5
   * random seeds of length 20 to 30 and random k between 5 and 19
   * random seeds of length 30 to 200 and random k between 5 and 19
 ==> passed

 Test 6f: check generate(k) with k >= seed length
   * seed = "01101000010", tap = 9, k = 11
   * seed = "01101000010", tap = 9, k = 12
   * seed = "01101000010", tap = 9, k = 30
   * random seeds of length 10 and k = 20
   * random seeds of length 10 and k = 31
 ==> passed

 Test 7a: check that step() and bitAt() are consistent for fixed seeds and taps
   * seed = "01101000010", tap = 9
   * seed = "01101000010", tap = 4
   * seed = "01101000010100010000", tap = 17
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59
 ==> passed

 Test 7b: check that generate(k) and bitAt() are consistent for fixed seeds, taps, and k
   * seed = "01101000010", tap = 9, k = 5
   * seed = "01101000010", tap = 4, k = 2
   * seed = "01101000010100010000", tap = 17, k = 20
   * seed = "011101110101101011110100101010010111011110111011101100001011", tap = 59, k = 7
 ==> passed

 Test 8: check that multiple LFSR objects can be created at the same time
 ==> passed

 Test 9a: check random intermixed sequence of calls to length(), bitAt(), toString(),
          step(), and generate(), with probabilities (p1, p2, p3, p4, p5),
          respectively, for LFSR from assignment specification
   * p = (0.0, 0.5, 0.0, 0.5, 0.0) using seed "01101000010" and tap 9
   * p = (0.0, 0.5, 0.0, 0.0, 0.5) using seed "01101000010" and tap 9
   * p = (0.0, 0.0, 0.5, 0.5, 0.0) using seed "01101000010" and tap 9
   * p = (0.0, 0.0, 0.5, 0.0, 0.5) using seed "01101000010" and tap 9
   * p = (0.0, 0.0, 0.0, 0.5, 0.5) using seed "01101000010" and tap 9
   * p = (0.1, 0.3, 0.2, 0.2, 0.2) using seed "01101000010" and tap 9
 ==> passed

 Test 9b: check random intermixed sequence of calls to length(), bitAt(), toString(),
          step(), and generate(), with probabilities (p1, p2, p3, p4, p5), respectively,
          for random LFSRs
   * p = (0.0, 0.5, 0.0, 0.5, 0.0) using random seeds of length 5 to 12
   * p = (0.0, 0.5, 0.0, 0.0, 0.5) using random seeds of length 5 to 12
   * p = (0.0, 0.0, 0.5, 0.5, 0.0) using random seeds of length 5 to 12
   * p = (0.0, 0.0, 0.5, 0.0, 0.5) using random seeds of length 5 to 12
   * p = (0.0, 0.0, 0.0, 0.5, 0.5) using random seeds of length 5 to 12
   * p = (0.1, 0.3, 0.2, 0.2, 0.2) using random seeds of length 5 to 12
 ==> passed


 Total: 23/23 tests passed!


 ================================================================
 ********************************************************************************
 *  MEMORY
 ********************************************************************************

 Analyzing memory of LFSR
 *-----------------------------------------------------------
 Running 10 total tests.

 Test 1a-1e: total memory usage for LFSR of length n

                  n        bytes
 ----------------------------------------------------------
 => passed       16          120
 => passed       32          184
 => passed       64          312
 => passed      128          568
 => passed      256         1080
 => passed      512         2104
 => passed     1024         4152
 => passed     2048         8248
 => passed     4096        16440
 => passed     8192        32824
 ==> 10/10 tests passed


 Estimated memory: 4.00 n + 56.00   (R^2 = 1.000)

 Maximum allowed memory: 4n + 128 bytes

 Total: 10/10 tests passed!

 ================================================================



 ********************************************************************************
 *  TIMING
 ********************************************************************************

 Timing LFSR
 *-----------------------------------------------------------
 Running 25 total tests.

 Test 1a-1k:  Create LFSR of length n

                     n  seconds
 ----------------------------------
 => passed        1000     0.00
 => passed        2000     0.00
 => passed        4000     0.00
 => passed        8000     0.00
 => passed       16000     0.00
 => passed       32000     0.00
 => passed       64000     0.00
 => passed      128000     0.01
 => passed      256000     0.01
 => passed      512000     0.03
 => passed     1024000     0.05
 ==> 11/11 tests passed


 Test 2a-2g:  Create LFSR of length n; call step() method n times

                     n  seconds
 ----------------------------------
 => passed        1000     0.00
 => passed        2000     0.00
 => passed        4000     0.01
 => passed        8000     0.03
 => passed       16000     0.11
 => passed       32000     0.38
 => passed       64000     1.42
 ==> 7/7 tests passed


 Test 3a-3g:  Create LFSR of length n; call toString() method once

                     n  seconds
 ----------------------------------
 => passed        1000     0.00
 => passed        2000     0.01
 => passed        4000     0.03
 => passed        8000     0.10
 => passed       16000     0.13
 => passed       32000     0.46
 => passed       64000     2.07
 ==> 7/7 tests passed


 Total: 25/25 tests passed!

 ================================================================



 ********************************************************************************
 *  TESTING CORRECTNESS (substituting reference LFSR.java)
 ********************************************************************************

 Testing correctness of PhotoMagic
 *-----------------------------------------------------------
 Running 15 total tests.

 Test 0a: check correctness of transform() for inputs from assignment specification
   * pipe.png, password = "01101000010100010000", tap = 17
   * Xpipe.png, password = "01101000010100010000", tap = 17
 ==> passed

 Test 0b: check correctness of main() for inputs from assignment specification
   * pipe.png, password = "01101000010100010000", tap = 17
   * Xpipe.png, password = "01101000010100010000", tap = 17
 ==> passed

 Test 0c: check that transform() does not mutate the Picture argument
   * pipe.png, password = "01101000010100010000", tap = 17
   * Xpipe.png, password = "01101000010100010000", tap = 17
 ==> passed

 Test 1: check correctness of transform() with color images
   * baboon-red.png, password = "01101000010100010000", tap = 17
   * baboon-green.png, password = "01101000010100010000", tap = 17
   * baboon-blue.png, password = "01101000010100010000", tap = 16
   * scarpet-cookies.png, password = "01101000010100010000", tap = 17
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
   * Xbaboon-red.png, password = "01101000010100010000", tap = 17
   * Xbaboon-green.png, password = "01101000010100010000", tap = 17
   * Xbaboon-blue.png, password = "01101000010100010000", tap = 17
   * Xscarpet-cookies.png, password = "01101000010100010000", tap = 17
   * Xshield.png, password = "010101010101010101010101010101", tap = 23
   * Xjava.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 2: check correctness of transform() with grayscale images
   * baboon-gray.png, password = "01101000010100010000", tap = 17
   * 512-by-512, password = "01101000010100010000", tap = 17
   * 512-by-512, password = "01101000010100010000", tap = 17
   * 512-by-512, password = "01101000010100010000", tap = 17
 ==> passed

 Test 3: check correctness of transform() with random color images
   * 512-by-512, password = "01101000010100010000", tap = 17
   * 512-by-512, password = "01101000010100010000", tap = 17
   * 512-by-512, password = "01101000010100010000", tap = 17
 ==> passed

 Test 4: check correctness of transform() with random grayscale images of different dimensions
   * 100-by-100, password = "01101000010100010000", tap = 17
   * 100-by-200, password = "01101000010100010000", tap = 17
   * 200-by-100, password = "01101000010100010000", tap = 17
   * 400-by-100, password = "01101000010100010000", tap = 17
   * 100-by-400, password = "01101000010100010000", tap = 17
   * 123-by-543, password = "01101000010100010000", tap = 17
   * 1-by-100, password = "01101000010100010000", tap = 17
   * 100-by-1, password = "01101000010100010000", tap = 17
 ==> passed

 Test 5: check correctness of transform() with different passwords and seeds
   * pipe.png, password = "10010", tap = 3
   * pipe.png, password = "011010", tap = 5
   * pipe.png, password = "000000110", tap = 5
   * pipe.png, password = "0011011010", tap = 7
   * pipe.png, password = "01101111011", tap = 9
   * pipe.png, password = "10111100101100100011", tap = 17
   * pipe.png, password = "111100101110011111010010101011", tap = 23
   * pipe.png, password = "101011100000110001000101001110011011", tap = 25
   * pipe.png, password = "111011010001010001000010011011111111111000101011", tap = 43
   * pipe.png, password = "100011001111110101111000111101000110111110100100010001001110", tap = 59
   * pipe.png, password = "0100110010000011100110001010011000000011100010001010101000010100000110110000111010101011101110110001", tap = 63
   * pipe.png, password = "011110010000110110101111010100011100000111100110000001100111101100010111001110111111111100110001100001101010110110001110010011100101010100011100011000", tap = 97
 ==> passed

 Test 6a: check that calling transform() twice recovers the original image for grayscale image
   * baboon-gray.png, password = "01101000010100010000", tap = 17
 ==> passed

 Test 6b: check that calling transform() twice recovers the original image for color images
   * pipe.png, password = "01101000010100010000", tap = 17
   * Xpipe.png, password = "01101000010100010000", tap = 17
   * baboon-red.png, password = "01101000010100010000", tap = 17
   * baboon-green.png, password = "01101000010100010000", tap = 17
   * baboon-blue.png, password = "01101000010100010000", tap = 17
   * scarpet-cookies.png, password = "01101000010100010000", tap = 17
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 7a: check correctness of main() for grayscale images
   * baboon-gray.png, password = "01101000010100010000", tap = 17
 ==> passed

 Test 7b: check correctness of main() for color images
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * Xshield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
   * Xjava.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 8: check that main() is consistent with transform()
   * baboon-gray.png, password = "01101000010100010000", tap = 17
   * pipe.png, password = "01101000010100010000", tap = 17
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 9a: check that transform() does not call show()
   * pipe.png, password = "01101000010100010000", tap = 17
   * Xpipe.png, password = "01101000010100010000", tap = 17
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed

 Test 9b: check that main() calls show() exactly once
   * baboon-gray.png, password = "01101000010100010000", tap = 17
   * pipe.png, password = "01101000010100010000", tap = 17
   * shield.png, password = "010101010101010101010101010101", tap = 23
   * java.png, password = "001110001111000100001101010010000100010010000000001100000100", tap = 59
 ==> passed


 Total: 15/15 tests passed!


 ================================================================
