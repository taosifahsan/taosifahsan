Assessment Summary

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  38/38 tests passed
Memory:       2/2 tests passed
Timing:       64/64 tests passed

Assessment Details

The following files were submitted:
----------------------------------
 5.3K Nov 26 20:07 MarkovModel.java
 3.9K Nov 26 20:07 readme.txt
 1.4K Nov 26 20:07 TextGenerator.java

|---------------------Free Late Day Ledger---------------------|
|netid      |used on another |used on this    |remaining       |
|dfarmer    |4               |0               |0               |
|tahsan     |0               |0               |4               |
|--------------------------------------------------------------|


********************************************************************************
*  COMPILING
********************************************************************************


% javac MarkovModel.java
*-----------------------------------------------------------

% javac TextGenerator.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
MarkovModel:

TextGenerator:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for MarkovModel.java
*-----------------------------------------------------------

% custom checkstyle checks for TextGenerator.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of MarkovModel
*-----------------------------------------------------------
Running 25 total tests.

Test 1: check order() method
  * input17.txt       k = 1..16
  * input17.txt       k = 0
  * input17.txt       k = 17
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
  * amendments.txt    k = 1..19
==> passed

Test 2a: check 1-argument freq() method
         (for all k-grams that appear in text)
  * input17.txt       k = 2
  * banana.txt        k = 2
  * one-fish.txt      k = 4
==> passed

Test 2b: check 1-argument freq() method
         (for all k-grams that appear in text)
  * input17.txt       k = 1..16
  * input17.txt       k = 0
  * input17.txt       k = 17
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
  * debrujin2-6.txt   k = 1..63
  * amendments.txt    k = 1..19
==> passed

Test 2c: check 1-argument freq() method
         (for k-grams that do not appear in text)
  * input17.txt       k = 1..16
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
==> passed

Test 2d: check 1-argument freq() method
         (for random input text strings over different alphabets)
  * alphabet = "ACGT"            k = 1..17
  * alphabet = "ACGT \n\r\t"     k = 1..17
  * alphabet = "ACGT\u0000"      k = 1..17
  * alphabet = "ACGT\u007F"      k = 1..17
==> passed

Test 3a: check 2-argument freq() method
         (for all k-grams that appear in text)
  * input17.txt       k = 2
  * banana.txt        k = 2
  * one-fish.txt      k = 4
==> passed

Test 3b: check 2-argument freq() method
         (for all k-grams that appear in text)
  * input17.txt       k = 1..16
  * input17.txt       k = 0
  * input17.txt       k = 17
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
  * debrujin2-6.txt   k = 1..63
  * amendments.txt    k = 5
==> passed

Test 3c: check argument freq() method
         (for k-grams that do not appear in text)
  * input17.txt       k = 1..16
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
==> passed

Test 4a: check that 1- and 2-argument freq() methods are consistent
         (for all k-grams that appear in text)
  * input17.txt       k = 1..16
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
==> passed

Test 4b: check that 1- and 2-argument freq() methods are consistent
         (for k-grams that do not appear in text)
  * input17.txt       k = 1..16
  * brown-fox.txt     k = 1..42
  * doughnuts.txt     k = 1..48
==> passed

Test 5a: check toString() method
  * input17.txt       k = 1..16
  * banana.txt        k = 1..5
  * input53.txt       k = 1..10
  * wawa.txt          k = 1..10
==> passed

Test 5b: check toString() method
         (for random input text strings over different alphabets)
  * alphabet = "ACGT"            k = 1..17
  * alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"  k = 1..17
==> passed

Test 5c: check toString() method for k = 0
  * banana.txt        k = 0
  * input17.txt       k = 0
==> passed

Test 6a: check that toString() method is consistent with 2-argument freq() method
  * input17.txt       k = 1..16
  * banana.txt        k = 1..5
  * input53.txt       k = 1..10
==> passed

Test 6b: check that toString() method is consistent with 2-argument freq() method
         (for random input text strings over different alphabets)
  * alphabet = "ACGT"            k = 1..17
  * alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"  k = 1..17
==> passed

Test 7a: check random() method for order 2 model
  * input17.txt       k = 2, kgram = "aa"
  * input17.txt       k = 2, kgram = "ag"
  * input17.txt       k = 2, kgram = "cg"
  * input17.txt       k = 2, kgram = "ga"
  * input17.txt       k = 2, kgram = "gc"
  * input17.txt       k = 2, kgram = "gg"
==> passed

Test 7b: check random() method for order 0 model
  * input17.txt       k = 0, kgram = ""
  * banana.txt        k = 0, kgram = ""
  * one-fish.txt      k = 0, kgram = ""
  * input53.txt       k = 0, kgram = ""
==> passed

Test 7c: check random() method for order k model
  * wawa.txt          k = 1
  * input53.txt       k = 2
  * cat.txt           k = 2
  * debrujin2-4.txt   k = 3
==> passed

Test 8a: check that random() is consistent with freq() for order 2 model
  * input17.txt       k = 2, kgram = "aa"
  * input17.txt       k = 2, kgram = "ag"
  * input17.txt       k = 2, kgram = "cg"
  * input17.txt       k = 2, kgram = "ga"
  * input17.txt       k = 2, kgram = "gc"
  * input17.txt       k = 2, kgram = "gg"
==> passed

Test 8b: check that random() is consistent with freq() for order 0 model
  * input17.txt       k = 0, kgram = ""
  * banana.txt        k = 0, kgram = ""
  * one-fish.txt      k = 0, kgram = ""
  * input53.txt       k = 0, kgram = ""
==> passed

Test 9: check that repeated calls to order() and two freq()
        methods return the same values
  * input17.txt       k = 2
  * input17.txt       k = 3
  * input53.txt       k = 0
  * input53.txt       k = 1
  * input53.txt       k = 4
==> passed

Test 10: create two MarkovModel objects at the same time
  * input17.txt with k1 = 2; input17.txt with k2 = 4
  * input17.txt with k1 = 2; banana.txt  with k2 = 2
  * input53.txt with k1 = 7; input17.txt with k2 = 3
==> passed

Test 11: call one-argument freq() method with invalid argument
  * input17.txt  k = 3, invalid kgram = "aa"
  * input17.txt  k = 3, invalid kgram = "aaaa"
  * input17.txt  k = 5, invalid kgram = "agc"
  * input17.txt  k = 5, invalid kgram = "aaaaaaagc"
==> passed

Test 12: call two-argument freq() with invalid argument
  * input17.txt  k = 3, invalid kgram = "aa", c = 'x'
  * input17.txt  k = 3, invalid kgram = "aaaa", c = 'x'
  * input17.txt  k = 5, invalid kgram = "agc", c = 't'
  * input17.txt  k = 5, invalid kgram = "aaaaaaagc", c = 'c'
==> passed

Test 13: call random() with invalid argument
  * input17.txt  k = 3, invalid kgram = "aa"
  * input17.txt  k = 3, invalid kgram = "aaaa"
  * input17.txt  k = 3, invalid kgram = "agc"
==> passed

Number of statistical tests performed = 35

Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of MarkovModel
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check memory for input17.txt with varying k
  * input17.txt              k = 2
  * input17.txt              k = 3
  * input17.txt              k = 4
  * input17.txt              k = 5
  * input17.txt              k = 6
==> passed

Test 2: check memory for larger texts
  * aesopshort.txt           k = 3
  * barack-obama2004dnc.txt  k = 6
  * amendments.txt           k = 4
  * pearl_jam.txt            k = 5
==> passed

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MarkovModel
*-----------------------------------------------------------
Running 41 total tests.

Test 1: construct MarkovModel and check number of calls to methods in ST
  * input17.txt       k = 2
  * input17.txt       k = 3
  * banana.txt        k = 2
  * amendments.txt    k = 4
==> passed

Test 2: construct MarkovModel; for each k-gram in text, call 1-argument
        freq() method and check number of calls to methods in ST
  * input17.txt       k = 2
  * input17.txt       k = 3
  * banana.txt        k = 2
  * amendments.txt    k = 4
==> passed

Test 3: construct MarkovModel; for each k-gram in text, call 2-argument
        freq() method and check number of calls to methods in ST
  * input17.txt       k = 2
  * input17.txt       k = 3
  * banana.txt        k = 2
  * amendments.txt    k = 4
==> passed

Test 4: construct MarkovModel; for each k-gram in text, call random()
        method and check number of calls to methods in ST
  * input17.txt       k = 2
  * input17.txt       k = 3
  * banana.txt        k = 2
  * amendments.txt    k = 4
==> passed

Test 5: construct MarkovModel; for each k-gram in text, call toString()
        method and check number of calls to methods in ST
  * input17.txt       k = 2
  * input17.txt       k = 3
  * banana.txt        k = 2
  * amendments.txt    k = 4
==> passed

Test 6a-6g: construct MarkovModel for text of length n
  * wiki_100k.txt, k = 7

                        n  seconds
    ------------------------------
    => passed        2500     0.00
    => passed        5000     0.01
    => passed       10000     0.01
    => passed       20000     0.03
    => passed       40000     0.06
    => passed       80000     0.13
    => passed      160000     0.29
    => passed      320000     0.56
    => passed      640000     1.26

==> 9/9 tests passed

Test 7a-7g: construct MarkovModel and call order() method n times
  * aesopshort.txt, k = 7

                        n  seconds
    ------------------------------
    => passed        2500     0.00
    => passed        5000     0.00
    => passed       10000     0.00
    => passed       20000     0.00
    => passed       40000     0.00
    => passed       80000     0.00
    => passed      160000     0.00
    => passed      320000     0.00
    => passed      640000     0.00

==> 9/9 tests passed

Test 8a-8g: construct MarkovModel and call 1-argument freq() method n times
  * aesopshort.txt, k = 7

                        n  seconds
    ------------------------------
    => passed        2500     0.00
    => passed        5000     0.00
    => passed       10000     0.01
    => passed       20000     0.01
    => passed       40000     0.02
    => passed       80000     0.04
    => passed      160000     0.07
    => passed      320000     0.13
    => passed      640000     0.26

==> 9/9 tests passed

Test 9a-9g: construct MarkovModel and call 2-argument freq() method n times
  * aesopshort.txt, k = 7

                        n  seconds
    ------------------------------
    => passed        2500     0.00
    => passed        5000     0.00
    => passed       10000     0.01
    => passed       20000     0.01
    => passed       40000     0.02
    => passed       80000     0.04
    => passed      160000     0.08
    => passed      320000     0.17
    => passed      640000     0.33

==> 9/9 tests passed

Total: 41/41 tests passed!


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference MarkovModel)
********************************************************************************

Testing correctness of TextGenerator
*-----------------------------------------------------------
Running 13 total tests.

Test 1a: check number of characters in output
  * input17.txt       k = 1, T = 10..20
  * input17.txt       k = 2, T = 5..10
  * input17.txt       k = 3, T = 10..100
  * input17.txt       k = 4, T = 100..1000
  * input17.txt       k = 5, T = 1000..10000
==> passed

Test 1b: check number of characters in output for corner cases
  * input17.txt       k = 17, T = 50..100
  * input17.txt       k = 17, T = 17
  * input17.txt       k = 10, T = 10
  * input17.txt       k = 0, T = 0
==> passed

Test 2a: check first k characters of output
  * input17.txt       k = 1..16, T = 100
  * brown-fox.txt     k = 1..16, T = 100
  * doughnuts.txt     k = 1..16, T = 100
  * input53.txt       k = 1..16, T = 100
  * amendments.txt    k = 1..16, T = 100
==> passed

Test 2b: check first k characters of output for corner cases
  * input17.txt       k = 17,    T = 100
  * input17.txt       k = 17,    T = 17
  * input17.txt       k = 10,    T = 10
==> passed

Test 3: check output for deterministic inputs
  * deadend.txt       k = 1..10, T = 100
  * input17.txt       k = 6..10, T = 100
  * debrujin2-3.txt   k = 3..6, T = 100
  * debrujin2-4.txt   k = 4..8, T = 100
  * debrujin2-5.txt   k = 5..10, T = 100
  * debrujin2-6.txt   k = 6..12, T = 100
  * debrujin5-3.txt   k = 3..6, T = 250
  * debrujin6-2.txt   k = 2..4, T = 128
  * debrujin10-4.txt  k = 4..6, T = 10000
==> passed

Test 4a: check that output is nondeterministic
  * input17.txt       k = 1..4, T = 45
  * debrujin2-3.txt   k = 1..2, T = 45
  * debrujin2-4.txt   k = 1..3, T = 45
==> passed

Test 4b: check that output is nondeterministic
  * input17.txt       k = 0,    T = 45
  * deadend.txt       k = 0,    T = 45
  * debrujin2-3.txt   k = 0,    T = 45
  * debrujin2-4.txt   k = 0,    T = 45
==> passed

Test 5a: check that every n-gram in output appear in input for n <= k+1
  * input17.txt       k = 1, T = 100000
  * input17.txt       k = 2, T = 100000
  * input17.txt       k = 3, T = 100000
  * input17.txt       k = 4, T = 100000
==> passed

Test 5b: check that every n-gram in output appear in input for n <= k+1
  * debrujin2-3.txt   k = 1, T = 100000
  * debrujin2-3.txt   k = 2, T = 100000
  * debrujin2-3.txt   k = 3, T = 100000
==> passed

Test 6: check that some n-grams in output do not appear in input for n = k+2
  * input17.txt       k = 1, T = 100000
  * input17.txt       k = 2, T = 100000
  * input17.txt       k = 3, T = 100000
  * input17.txt       k = 4, T = 100000
  * input17.txt       k = 5, T = 100000
==> passed

Test 7a: check distribution of characters following each k-gram
  * input17.txt       k = 1, T = 100000
  * input17.txt       k = 2, T = 100000
  * input17.txt       k = 3, T = 100000
==> passed

Test 7b: check distribution of characters following each k-gram
  * cat.txt           k = 1, T = 100000
  * cat.txt           k = 2, T = 100000
  * cat.txt           k = 3, T = 100000
==> passed

Test 7c: check distribution of characters following each k-gram
  * input17.txt       k = 0, T = 100000
  * cat.txt           k = 0, T = 100000
==> passed


Number of statistical tests performed = 33

Total: 13/13 tests passed!


================================================================
********************************************************************************
*  TIMING
********************************************************************************

Timing TextGenerator
*-----------------------------------------------------------
Running 23 total tests.

Test 1: check number of calls to methods in MarkovModel
  * banana.txt        k = 0, T = 10
  * input17.txt       k = 1, T = 100
  * brown-fox.txt     k = 2, T = 1000
  * cat.txt           k = 3, T = 222
  * aesopshort.txt    k = 4, T = 333
  * amendments.txt    k = 5, T = 444
==> passed

Test 2a-2k: generate random text of length T using Markov model of order k = 2

                    T  seconds
------------------------------
=> passed        1000     0.01
=> passed        2000     0.01
=> passed        4000     0.01
=> passed        8000     0.02
=> passed       16000     0.02
=> passed       32000     0.04
=> passed       64000     0.07
=> passed      128000     0.11
=> passed      256000     0.20
=> passed      512000     0.34
=> passed     1024000     0.64
==> 11/11 tests passed


Test 3a-3k: generate random text of length T = 100,000 using Markov model of order k

                    k  seconds
------------------------------
=> passed           1     0.06
=> passed           2     0.07
=> passed           4     0.10
=> passed           8     0.13
=> passed          16     0.14
=> passed          32     0.13
=> passed          64     0.23
=> passed         128     0.25
=> passed         256     0.30
=> passed         512     0.39
=> passed        1024     0.56
==> 11/11 tests passed


Total: 23/23 tests passed!


================================================================
